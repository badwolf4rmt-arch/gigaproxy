# gigachat_request.py
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ GigaChat API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
import os
import json
import requests
import base64

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
OAUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
API_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

def get_access_token():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω GigaChat —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º client_id –∏ client_secret"""
    client_id = os.getenv("GIGACHAT_CLIENT_ID")
    client_secret = os.getenv("GIGACHAT_CLIENT_SECRET")

    if not client_id or not client_secret:
        raise Exception("‚ùå Client ID –∏–ª–∏ Client Secret –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö GitHub")

    # –ö–æ–¥–∏—Ä—É–µ–º client_id –∏ client_secret –≤ Base64 –¥–ª—è Basic Auth
    creds = base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()

    print("üîê –ü–æ–ª—É—á–∞—é –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
    response = requests.post(
        OAUTH_URL,
        headers={"Authorization": f"Basic {creds}"},
        data={"scope": "GIGACHAT_API_CORP"},
        verify=False  # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã
    )

    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code} {response.text}")

    token = response.json().get("access_token")
    if not token:
        raise Exception("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å access_token –∏–∑ –æ—Ç–≤–µ—Ç–∞")
    
    print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    return token


def query_gigachat(prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GigaChat"""
    token = get_access_token()

    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }

    data = {
        "model": "GigaChat-2-Max",
        "scope": "GIGACHAT_API_CORP",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 512
    }

    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ GigaChat: {prompt[:50]}...")
    response = requests.post(API_URL, headers=headers, json=data, verify=False)

    print(f"üîç –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {response.text}")

    result = response.json()
    print("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = query_gigachat("–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã?")
        with open("result.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ result.json")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        with open("result.json", "w", encoding="utf-8") as f:
            json.dump({"error": str(e)}, f, ensure_ascii=False, indent=2)


if __name__ == "__main__":
    main()
